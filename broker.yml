---
### broker.yml - OpenShift Origin Broker Ansible Playbook of Plays
#
# Ansible playbook to deploy OpenShift Origin Broker nightly builds
#
# This is the OpenShift Origin Broker ansible playbook, it contains multiple 
# plays as can be found below. Each one can be run indendently of one another
# by utilizing the ansible tags feature, an example of running only the plays
# tagged with selinux and named is as follows:
#
#       $ ansible-playbook broker.yml -t selinux,named
#
#   This is for those who want to make modifications and only run the play
# correlated to that change. Also, without the added overhead of a fanned out 
# directory structure because at this time it's not quite a large enough
# playbook that it should be necessary to do so.
#
#
#

- name: Broker pre-install configs
  hosts: brokers
  user: root
  vars_files:
    - varfiles/origin_vars.yml
  tasks:
    - name: Hostname config
      template: src=templates/broker/hostname.j2 dest=/etc/hostname
                owner=root group=root mode=0644 backup=yes
    - name: check for hostname in /etc/hosts
      shell: grep '${ansible_default_ipv4.address} ${broker_fqdn}' /etc/hosts
      ignore_errors: yes 
      register: e_checkhosts
    - name: conditionally set /etc/hosts
      shell: printf "${ansible_default_ipv4.address} ${broker_fqdn}\n" >>
             /etc/hosts
      only_if: ${e_checkhosts.rc} != 0
  tags:
    - preinstallconf

- name: SELinux Config
  hosts: brokers
  user: root
  vars_files:
    - varfiles/origin_vars.yml
  tasks:
    ### Step 0 - SELinux Enforcing 
    - name: SELinux Enforcing (Targeted)
      selinux: policy=targeted state=enforcing
    - name: Ensure Installed - policycoreutils
      yum: pkg=policycoreutils state=installed
    - name: Ensure Installed - policycoreutils-python
      yum: pkg=policycoreutils-python state=installed
    - name: SELinux - configure sebooleans
      seboolean:  name=$item state=true persistent=yes
      with_items:
        - httpd_unified
        - httpd_can_network_connect
        - httpd_can_network_relay 
        - httpd_run_stickshift
        - named_write_master_zones 
        - httpd_verify_dns
  tags:
    - selinux

- name: FirewallD Config
  hosts: brokers
  user: root
  vars_files:
    - varfiles/origin_vars.yml
  tasks:
    ### FirewallD install/config
    - name: Ensure Install - firewalld
      yum: pkg=firewalld state=installed
    - name: Ensure firewalld Started and Enabled
      service: name=firewalld state=started enabled=yes
      async: 15
      poll: 5
    - name: Check for firewalld configs
      script: scripts/broker/broker_check_firewalld.sh
      ignore_errors: yes 
      register: e_checkfirewalld
    - name: Broker firewalld config
      script: scripts/broker/broker_firewalld.sh
      only_if: ${e_checkfirewalld.rc} != 0
  tags:
    - firewalld
      
- name: Repo Setup
  hosts: brokers
  user: root
  vars_files:
    - varfiles/origin_vars.yml
  tasks:
    ### Setup Origin repos
    - name: Enable OpenShift Origin Nightly yum repo
      template: src=templates/openshift-origin-nightly.repo.j2
              dest=/etc/yum.repos.d/openshift-origin-nightly.repo
    - name: Enable OpenShift Origin Supplemental yum repo
      template: src=templates/openshift-origin-supplemental.repo.j2
                dest=/etc/yum.repos.d/openshift-origin-supplemental.repo
  tags:
    - reposetup

- name: NTP Config
  hosts: brokers
  user: root
  vars_files:
    - varfiles/origin_vars.yml
  tasks:
    # NTP - sync first, then enable service
    - name: Ensure Install - ntpdate 
      yum: pkg=ntpdate state=installed
    - name: Ensure Install - ntp 
      yum: pkg=ntp state=installed
    - name: Stop ntp daemon for ntpdate sync
      service: name=ntpd state=stopped
    - name: Synchronize Clock with ntpdate
      command: /usr/sbin/ntpdate clock.redhat.com
    - name: Start and Enable ntp daemon 
      service: name=ntpd state=started enabled=yes
  tags:
    - ntp

- name: named
  hosts: brokers
  user: root
  vars_files:
    - varfiles/origin_vars.yml
  tasks:
    # Install and configure BIND
    - name: Install bind
      yum: pkg=$item state=latest
      with_items:
        - bind
        - bind-utils
    - name: Configure named dynamic-domain.db
      template: src=templates/named/dynamic-zone.db.j2
                dest=/var/named/dynamic/${cloud_domain}.db
                backup=yes
    - name: Configure named infra-zone.db
      template: src=templates/named/infra-zone.db.j2
                dest=/var/named/${infra_domain}.db
                backup=yes
    - name: Configure named forwarders.conf
      template: src=templates/named/forwarders.conf.j2
                dest=/var/named/forwarders.conf
                backup=yes
    - name: Configure named named.conf
      template: src=templates/named/named.conf.j2
                dest=/etc/named.conf
                backup=yes
    - name: Setup DNSSEC Keys and Config script
      template: src=templates/named/named_dnssec_setup.sh.j2
                dest=/root/00-setup_dnssec.sh
                owner=root group=root mode=0500
    - name: Run named DNSSEC script 
      action: raw /root/00-setup_dnssec.sh
    - name: Clean up after named DNSSEC script
      file: path=/root/00-setup_dnssec.sh state=absent
    - name: Configure dhclient for DNS
      template: src=templates/named/dhclient.conf.j2
                dest=/etc/dhcp/dhclient-oso.conf
                backup=yes
    - name: restart/enable named daemon
      service: name=named state=started enabled=yes
  tags:
    - named

- name: MongoDB
  hosts: brokers
  user: root
  vars_files:
    - varfiles/origin_vars.yml
  tasks:
    # MongoDB Install and configure 
    #   This could be broken out into it's own playbook to allow for some
    #   fancy orchestration and replication set configuration but for now 
    #   we will keep this simple.
    - name: Install MongoDB
      yum: pkg=mongodb state=latest
    - name: Install MongoDB Server
      yum: pkg=mongodb-server state=latest
    - name: Ensure MongoDB daemon stopped
      service: name=mongod state=stopped
    - name: Ensure ruby installed for MongoDB Auth conf
      yum: pkg=ruby state=installed
    - name: Check for mongo auth
      command: ${egrep} '^auth = true' /etc/mongodb.conf
      ignore_errors: yes 
      register: e_checkmongoauth
    - name: Configure MongoDB
      template: src=templates/mongodb/mongodb.conf.j2
                dest=/etc/mongodb.conf backup=yes
      only_if: ${e_checkmongoauth.rc} != 0
    - name: Start and Enable MongoDB daemon
      service: name=mongod state=started enabled=yes
    - name: MongoDB user/pw script template copy
      template: src=templates/mongodb/set_mongopw.sh.j2
                dest=/root/00-set_mongopw.sh
                owner=root group=root mode=0500
      only_if: ${e_checkmongoauth.rc} != 0
    - name: Run MongoDB user/pw script 
      action: raw /root/00-set_mongopw.sh
      only_if: ${e_checkmongoauth.rc} != 0
    - name: Clean up after MongoDB user/pw script
      file: path=/root/00-set_mongopw.sh state=absent
    - name: Enable mongo auth
      shell: printf "auth = true\n" >> /etc/mongodb.conf
      only_if: ${e_checkmongoauth.rc} != 0
  tags:
    - mongo

- name: ActiveMQ
  hosts: brokers
  user: root
  vars_files:
    - varfiles/origin_vars.yml
  tasks:
    # Install and configure ActiveMQ
    - name: Install ActiveMQ
      yum: pkg=activemq state=latest
    - name: Configure ActiveMQ jetty.xml
      template: src=templates/activemq/jetty.xml.j2
                dest=/etc/activemq/jetty.xml
    - name: Configure ActiveMQ activemq.xml
      template: src=templates/activemq/activemq.xml.j2
                dest=/etc/activemq/activemq.xml
    - name: Configure ActiveMQ jetty-realm.properties
      template: src=templates/activemq/jetty-realm.properties.j2
                dest=/etc/activemq/jetty-realm.properties.xml
    - name: Configure ActiveMQ tmp-activemq.conf
      template: src=templates/activemq/tmp-activemq.conf.j2
                dest=/etc/tmpfiles.d/activemq.conf
    - name: Start and Enable ActiveMQ
      service: name=activemq state=started enabled=yes
  tags:
    - activemq

- name: Devel Packages Install
  hosts: brokers
  user: root
  vars_files:
    - varfiles/origin_vars.yml
  tasks:
    ### Dev tools needed by some gem installs for native modules/extensions 
    - name: Install dev-tool deps for gem installs
      yum: pkg=$item state=latest
      with_items:
        - ruby-devel 
        - audit
        - mysql-devel 
        - mongodb-devel 
        - gcc 
        - make
  tags:
    - develpkgs

- name: OpenShift Origin Broker pkgs Install
  hosts: brokers
  user: root
  vars_files:
    - varfiles/origin_vars.yml
  tasks:
    ### Big honking broker package list
    - name: Install OpenShift Package List
      yum: pkg=$item state=latest
      with_items:
        - rhc
        - openshift-origin-broker
        - rubygem-openshift-origin-msg-broker-mcollective 
        - rubygem-openshift-origin-dns-nsupdate 
        - rubygem-openshift-origin-dns-bind 
        - rubygem-openshift-origin-dns-bind 
        - rubygem-openshift-origin-controller 
        - rubygem-openshift-origin-auth-mongo
        - rubygem-openshift-origin-auth-remote-user
        - openshift-origin-broker-util 
        - rubygem-passenger 
        - openssh 
        - httpd
        - mod_passenger 
        - rubygem-rails
        - rubygem-railties
        - rubygem-actionpack
        - rubygem-activemodel
        - rubygem-activerecord
        - rubygem-activeresource
        - rubygem-arel
        - rubygem-bigdecimal
        - rubygem-bson
        - rubygem-bson_ext
        - rubygem-builder
        - rubygem-bundler
        - rubygem-cucumber
        - rubygem-diff-lcs
        - rubygem-dnsruby
        - rubygem-erubis
        - rubygem-gherkin
        - rubygem-hike
        - rubygem-i18n
        - rubygem-mail
        - rubygem-metaclass
        - rubygem-mime-types
        - rubygem-minitest
        - rubygem-mocha
        - rubygem-mongo
        - rubygem-multi_json
        - rubygem-netrc
        - rubygem-open4
        - rubygem-parseconfig
        - rubygem-rack
        - rubygem-rack-cache
        - rubygem-rack-ssl
        - rubygem-rack-test
        - rubygem-rake
        - rubygem-rdoc
        - rubygem-regin
        - rubygem-rest-client
        - rubygem-simplecov
        - rubygem-sprockets
        - rubygem-state_machine
        - rubygem-stomp
        - rubygem-systemu
        - rubygem-term-ansicolor
        - rubygem-thor
        - rubygem-tilt
        - rubygem-treetop
        - rubygem-tzinfo
        - rubygem-xml-simple
        - rubygem-webmock
        - rubygem-fakefs
      async: 5400
      poll: 10
  tags:
    - brokerpkgs

- name: OpenShift Origin Broker gems Install
  hosts: brokers
  user: root
  vars_files:
    - varfiles/origin_vars.yml
  tasks:
    ### Install gems not packaged in Fedora (we should package these)
    - name: Install gems not in Fedora repos
      command: $gem install $item 
      with_items: 
        - mongoid 
        - origin 
        - mysql
  tags:
    - brokergems

- name: OpenShift Origin Web Admin Console
  hosts: brokers
  user: root
  vars_files:
    - varfiles/origin_vars.yml
  tasks:
    - name: Install OpenShift Origin Console pkgs
      yum: pkg=$item state=latest
      with_items:
        - rubygem-openshift-origin-console
        - openshift-origin-console
    - name: Configure OpenShift Origin Console
      template: src=templates/console/console.conf.j2
                dest=$console_conf_path
                owner=apache group=apache mode=0644
    - name: Bundle install and build Rails assets
      script: scripts/broker/console_bundle_install.sh
    - name: SELinux settings for OpenShift Origin Console
      seboolean:  name=$item state=true persistent=yes
      with_items:
       - httpd_can_network_connect
       - httpd_can_network_relay
       - httpd_read_user_content
       - httpd_enable_homedirs
       - httpd_execmem
  tags:
    - console

- name: Post-Install Configure of OpenShift Origin Broker
  hosts: brokers
  user: root
  vars_files:
    - varfiles/origin_vars.yml
  tasks:
    - name: broker.conf
      template: src=templates/broker/broker.conf.j2
                dest=/etc/openshift/broker.conf
                owner=apache group=apache mode=0644
    - name: broker-dev.conf
      template: src=templates/broker/broker.conf.j2
                dest=/etc/openshift/broker-dev.conf
                owner=apache group=apache mode=0644
    - name: Verify openssh and openssl installed for keygen
      yum: pkg=$item state=latest
      with_items:
        - openssl
        - openssh
    - name: Generate broker auth keys
      script: scripts/broker/gen_broker_auth_keys.sh
              creates=${broker_auth_pubkey_path}
    - name: Generate broker rsync keys
      script: scripts/broker/gen_broker_rsync_keys.sh
              creates=${broker_rsync_key_path}
    - name: Install base servername.conf
      template: src=templates/broker/broker_servername.conf.j2
                dest=/etc/httpd/conf.d/000000_openshift_origin_broker_servername.conf
                owner=root group=root mode=0644
    - name: Configure mcollective broker plugin 
      copy: src=files/broker/msg-broker-mcollective.conf
                dest=/etc/openshift/plugins.d/openshift-origin-msg-broker-mcollective.conf
                owner=root group=root mode=0644
    - name: Broker Auth Plugin
      template: src=templates/broker/plugins/auth/mongo/mongo.conf.plugin.j2
                dest=/etc/openshift/plugins.d/openshift-origin-auth-mongo.conf
                owner=root group=root mode=0644
    - name: Remote User Auth Plugin
      template: src=templates/broker/plugins/auth/basic/htpasswd.j2
                dest=/etc/openshift/plugins.d/openshift-origin-auth-remote-user.example
                owner=root group=root mode=0644
    - name: Register dnssec key for nsupdate plugin
      shell: "${awk} '/^Key:/{print $2}' /var/named/K${cloud_domain}*.private"
      register: nsupdate_key
    - name: bind dns plugin conf
      template: src=templates/broker/plugins/dns/bind/dns-bind.conf.j2
                dest=/etc/openshift/plugins.d/openshift-origin-dns-bind.conf
                owner=root group=root mode=0644
    - name: Verify origin-broker and rubygem-bundler are installed
      yum: pkg=$item state=latest
      with_items:
        - openshift-origin-broker
        - rubygem-bundler
    - name: Broker bundle install 
      script: scripts/broker/broker_bundle_install.sh
    - name: start and enable openshift-broker service 
      service: name=openshift-broker state=started enabled=yes
    - name: start and enable httpd
      service: name=httpd state=started enabled=yes
    - name: start and enable openshift-console
      service: name=openshift-console state=started enabled=yes
  tags:
    - postinstallconf
